#!/usr/bin/env python

import math
import rospy

from ackermann_msgs.msg import AckermannDrive
from Adafruit_MotorHAT import Adafruit_MotorHAT

MOTORHAT = Adafruit_MotorHAT(addr=0x60)
LEFT_MOTOR = MOTORHAT.getMotor(1)
RIGHT_MOTOR = MOTORHAT.getMotor(2)

LEFT_MOTOR_SPEED = 0
RIGHT_MOTOR_SPEED = 0

RELEASE = Adafruit_MotorHAT.RELEASE
FORWARD = Adafruit_MotorHAT.FORWARD
BACKWARD = Adafruit_MotorHAT.BACKWARD

DIFFERENTIAL_LEFT_GAIN = 0.7
DIFFERENTIAL_RIGHT_GAIN = 0.7
DIFFERENTIAL_YAW_TRIM = 0.0

BASELINE = 0.1
WHEEL_RADIUS = 0.0318
k = 27.0

ADAFRUIT_PULSE_SCALING = 255

def turn_off_motors():
    LEFT_MOTOR.run(RELEASE)
    RIGHT_MOTOR.run(RELEASE)

def set_motor_speed(motor, speed):
    if speed > 1 or speed < -1:
            raise ValueError("motor speed must be between 1(forward) and -1(reverse)")
    if speed > 0: 
        motor.run(FORWARD)
    else: 
        motor.run(BACKWARD)
    pulse_value = max(min(abs(ADAFRUIT_PULSE_SCALING * speed), ADAFRUIT_PULSE_SCALING), -ADAFRUIT_PULSE_SCALING)
    motor.setSpeed(pulse_value)

def move(left_speed, right_speed):
    set_motor_speed(LEFT_MOTOR, left_speed)
    set_motor_speed(RIGHT_MOTOR, right_speed)

def throttle_angle_to_thrust(throttle, steering_angle):
    
    converted_angle = (steering_angle - 90) / 180

    # adjusting k by gain and trim
    k_l_inv = (DIFFERENTIAL_LEFT_GAIN - DIFFERENTIAL_YAW_TRIM) / k
    k_r_inv = (DIFFERENTIAL_RIGHT_GAIN + DIFFERENTIAL_YAW_TRIM) / k

    omega_l = (throttle - 0.5 * converted_angle * BASELINE) / WHEEL_RADIUS
    omega_r = (throttle + 0.5 * converted_angle * BASELINE) / WHEEL_RADIUS

    # conversion from motor rotation rate to duty cycle
    u_l = omega_l * k_l_inv
    u_r = omega_r * k_r_inv

    # limiting output to limit, which is 1.0 for the duckiebot
    left_motor_throttle = max(min(u_l, 1), -1)
    right_motor_throttle = max(min(u_r, 1), -1)

    return left_motor_throttle, right_motor_throttle

def command_recieved(message):
    speed = message.speed
    steering_angle = message.steering_angle
    (left_speed, right_speed) = throttle_angle_to_thrust(speed, steering_angle)
    move(left_speed, right_speed)

if __name__ == '__main__':
    # this is the business end of the node
    rospy.init_node('drivetrain', anonymous=False)
    rospy.on_shutdown(turn_off_motors)
    rospy.Subscriber('~ackermann', AckermannDrive, command_recieved)
    rospy.spin()
