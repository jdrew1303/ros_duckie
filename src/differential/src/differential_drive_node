#!/usr/bin/env python

from __future__ import division

import atexit
import rospy

from math import fabs, floor
from ackermann_msgs.msg import AckermannDrive
from Adafruit_MotorHAT import Adafruit_MotorHAT

MOTORHAT = Adafruit_MotorHAT(addr=0x60)
LEFT_MOTOR = MOTORHAT.getMotor(1)
RIGHT_MOTOR = MOTORHAT.getMotor(2)

RELEASE = Adafruit_MotorHAT.RELEASE
FORWARD = Adafruit_MotorHAT.FORWARD
BACKWARD = Adafruit_MotorHAT.BACKWARD

ADAFRUIT_PULSE_SCALING = 255

def release_motors():
    LEFT_MOTOR.run(RELEASE)
    RIGHT_MOTOR.run(RELEASE)

def set_motor_speed(motor, speed):
    if speed > 0: 
        motor.run(FORWARD)
    else: 
        motor.run(BACKWARD)
    pulse_value = int((speed) * (ADAFRUIT_PULSE_SCALING - 60) + 60)
    print(pulse_value)
    motor.setSpeed(pulse_value)

def move(left_speed, right_speed):
    print((left_speed, right_speed))
    set_motor_speed(LEFT_MOTOR, left_speed)
    set_motor_speed(RIGHT_MOTOR, right_speed)

# To maintain a constant speed you will need to have throttle under .5 
# in either direction. Once you go above this value you sacrifice control 
# for speed. So keep it under the limit and scale your thrust instead 
# (take 0.5 as the max and if you need 0.4 then that equates to 0.2).
# r = speed in the range of [-1,1]
# theta is the angle in degrees [0, 360] (90 is straight)
def throttle_angle_to_thrust(r=0.5, theta=0.0):
    theta = (((theta - 90) + 180) % 360) - 180  # normalize value to [-180, 180)
    v_a = r * (45 - theta % 90) / 45          # falloff of main motor
    v_b = min(100, 2 * r + v_a, 2 * r - v_a)  # compensation of other motor
    if theta < -90: return -v_b, -v_a
    if theta < 0:   return -v_a, v_b
    if theta < 90:  return v_b, v_a
    return v_a, -v_b

def command_recieved(message):
    speed = message.speed
    steering_angle = message.steering_angle
    (left_speed, right_speed) = throttle_angle_to_thrust(speed, steering_angle)
    move(left_speed, right_speed)

atexit.register(release_motors)

if __name__ == '__main__':
    release_motors()
    # this is the business end of the node
    rospy.init_node('drivetrain', anonymous=False)
    rospy.on_shutdown(release_motors)
    rospy.Subscriber('~ackermann', AckermannDrive, command_recieved)
    rospy.spin()