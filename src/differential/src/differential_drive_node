#!/usr/bin/env python

import math
import rospy

from ackermann_msgs.msg import AckermannDrive
from Adafruit_MotorHAT import Adafruit_MotorHAT

MOTORHAT = Adafruit_MotorHAT(addr=0x60)
LEFT_MOTOR = MOTORHAT.getMotor(1)
RIGHT_MOTOR = MOTORHAT.getMotor(2)

LEFT_MOTOR_SPEED = 0
RIGHT_MOTOR_SPEED = 0

RELEASE = Adafruit_MotorHAT.RELEASE
FORWARD = Adafruit_MotorHAT.FORWARD
BACKWARD = Adafruit_MotorHAT.BACKWARD

DIFFERENTIAL_LEFT_GAIN = 1
DIFFERENTIAL_RIGHT_GAIN = 1
DIFFERENTIAL_YAW_TRIM = 0

ADAFRUIT_PULSE_SCALING = 255

def turn_off_motors():
    LEFT_MOTOR.run(RELEASE)
    RIGHT_MOTOR.run(RELEASE)

def set_motor_speed(motor, speed):
    if speed > 1 or speed < -1:
            raise ValueError("motor speed must be between 1(forward) and -1(reverse)")
    if speed > 0: 
        motor.run(FORWARD)
    else: 
        motor.run(BACKWARD)
    throttle_value = abs(int(speed * ADAFRUIT_PULSE_SCALING / 100))
    motor.setSpeed(throttle_value)

def move(left_speed, right_speed):
    set_motor_speed(LEFT_MOTOR, left_speed)
    set_motor_speed(RIGHT_MOTOR, right_speed)

def throttle_angle_to_thrust(throttle, steering_angle):
    throttle = min(1, max(-1, throttle))
    # scale for the input (can no longer reverse)
    r = min(max(0, throttle * 100), 100)
    # normalise the angles to [-180, 180]
    theta = ((steering_angle + 180) % 360) - 180
    
    # calculate falloff for the main motor
    v_a = r * (45 - theta % 90) / 45
    # compensate for main motor
    v_b = min(100, 2 * r + v_a, 2 * r - v_a)
    
    if theta < -90: return -v_b, -v_a
    if theta < 0: return -v_a, v_b
    if theta < 90: return v_b, v_a
    return v_a, -v_b

def command_recieved(message):
    speed = message.speed
    steering_angle = message.steering_angle
    (left_speed, right_speed) = throttle_angle_to_thrust(speed, steering_angle)
    move(left_speed, right_speed)

if __name__ == '__main__':
    # this is the business end of the node
    rospy.init_node('drivetrain', anonymous=False)
    rospy.on_shutdown(turn_off_motors)
    rospy.Subscriber('~ackermann', AckermannDrive, command_recieved)
    rospy.spin()
