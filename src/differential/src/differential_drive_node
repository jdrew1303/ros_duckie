#!/usr/bin/env python

from math import fabs, floor
import rospy

from ackermann_msgs.msg import AckermannDrive
from Adafruit_MotorHAT import Adafruit_MotorHAT

MOTORHAT = Adafruit_MotorHAT(addr=0x60)
LEFT_MOTOR = MOTORHAT.getMotor(1)
RIGHT_MOTOR = MOTORHAT.getMotor(2)

LEFT_MOTOR_SPEED = 0
RIGHT_MOTOR_SPEED = 0

RELEASE = Adafruit_MotorHAT.RELEASE
FORWARD = Adafruit_MotorHAT.FORWARD
BACKWARD = Adafruit_MotorHAT.BACKWARD

DIFFERENTIAL_LEFT_GAIN = 0.7
DIFFERENTIAL_RIGHT_GAIN = 0.7
DIFFERENTIAL_YAW_TRIM = 0.0

BASELINE = 0.1
WHEEL_RADIUS = 0.0318
k = 27.0

ADAFRUIT_PULSE_SCALING = 255

def turn_off_motors():
    LEFT_MOTOR.run(RELEASE)
    RIGHT_MOTOR.run(RELEASE)

def set_motor_speed(motor, speed):
    if speed > 1 or speed < -1:
            raise ValueError("motor speed must be between 1(forward) and -1(reverse)")
    if speed > 0: 
        motor.run(FORWARD)
    else: 
        motor.run(BACKWARD)
    pulse_value = int(floor(fabs(speed) * (ADAFRUIT_PULSE_SCALING - 60) + 60))
    print(pulse_value)
    motor.setSpeed(pulse_value)

def move(left_speed, right_speed):
    print((left_speed, right_speed))
    set_motor_speed(LEFT_MOTOR, left_speed)
    set_motor_speed(RIGHT_MOTOR, right_speed)

def throttle_angle_to_thrust(speed, steering_angle):

    LEFT_SIGN = 1
    RIGHT_SIGN = 1

    AXEL_TO_RADIUS_RATIO = 1.0
    
    angle = (steering_angle - 90) / 90

    vmax = 1.0 / (1.0 + 0.5 * AXEL_TO_RADIUS_RATIO)

    v = speed * vmax

    vl = vmax + v * (- angle * 0.5 * AXEL_TO_RADIUS_RATIO) * LEFT_SIGN
    vr = vmax + v * (+ angle * 0.5 * AXEL_TO_RADIUS_RATIO) * RIGHT_SIGN

    return (vl, vr)

def command_recieved(message):
    speed = message.speed
    steering_angle = message.steering_angle
    (left_speed, right_speed) = throttle_angle_to_thrust(speed, steering_angle)
    move(left_speed, right_speed)

if __name__ == '__main__':
    # this is the business end of the node
    rospy.init_node('drivetrain', anonymous=False)
    rospy.on_shutdown(turn_off_motors)
    rospy.Subscriber('~ackermann', AckermannDrive, command_recieved)
    rospy.spin()
