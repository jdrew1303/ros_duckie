#!/usr/bin/env python

import rospy

from ackermann_msgs.msg import AckermannDrive
from Adafruit_MotorHAT import Adafruit_MotorHAT

MOTORHAT = Adafruit_MotorHAT(addr=0x60)
LEFT_MOTOR = MOTORHAT.getMotor(1)
RIGHT_MOTOR = MOTORHAT.getMotor(2)

LEFT_MOTOR_SPEED = 0
RIGHT_MOTOR_SPEED = 0

RELEASE = Adafruit_MotorHAT.RELEASE
FORWARD = Adafruit_MotorHAT.FORWARD
BACKWARD = Adafruit_MotorHAT.BACKWARD

ACKERMANN_CAR_LENGTH = 0.10
ACKERMANN_AXLE_WIDTH = 0.06
ACKERMAN_WHEEL_OFFSET = 0
DIFFERENTIAL_LEFT_GAIN = 1
DIFFERENTIAL_RIGHT_GAIN = 1
DIFFERENTIAL_YAW_TRIM = 0

ADAFRUIT_PULSE_SCALING = 255

def turn_off_motors():
    LEFT_MOTOR.run(RELEASE)
    RIGHT_MOTOR.run(RELEASE)

def set_motor_speed(motor, speed):
    if speed > 1 or speed < -1:
            raise ValueError("motor speed must be between 1(forward) and -1(reverse)")
    if speed > 0: 
        motor.run(FORWARD)
    else: 
        motor.run(BACKWARD)
    throttle_value = abs(int(speed * ADAFRUIT_PULSE_SCALING))
    motor.setSpeed(throttle_value)

def move(left_speed, right_speed):
    set_motor_speed(LEFT_MOTOR, left_speed)
    set_motor_speed(RIGHT_MOTOR, right_speed)

def ackermann_to_differential(throttle, steering_angle):
    throttle = min(1, max(-1, throttle))
    if abs(steering_angle) < 1E-4:
        left_speed = throttle
        right_speed = throttle
    else:
        angle_radians = math.radians(steering_angle)
        steer_tan = math.tan(angle_radians)
        r = ACKERMANN_CAR_LENGTH / steer_tan
        left_speed = throttle * (1.0 - (ACKERMANN_AXLE_WIDTH * 0.5 - ACKERMAN_WHEEL_OFFSET)/r ) * DIFFERENTIAL_LEFT_GAIN + DIFFERENTIAL_YAW_TRIM
        right_speed = throttle * (1.0 + (ACKERMANN_AXLE_WIDTH * 0.5 + ACKERMAN_WHEEL_OFFSET)/r ) * DIFFERENTIAL_RIGHT_GAIN - DIFFERENTIAL_YAW_TRIM

    left_speed = min(max(left_speed, -1), 1)
    right_speed = min(max(right_speed, -1), 1)
    return (left_speed, right_speed,)


def command_recieved(message):
    speed = message.speed
    steering_angle = message.steering_angle
    (left_speed, right_speed) = ackermann_to_differential(speed, steering_angle)
    move(left_speed, right_speed)

if __name__ == '__main__':
    # this is the business end of the node
    rospy.init_node('drivetrain', anonymous=False)
    rospy.on_shutdown(turn_off_motors)
    rospy.Subscriber('ackermann', AckermannDrive, command_recieved)
    rospy.spin()
